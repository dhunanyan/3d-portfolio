import { ModelVectorType } from "./models/types";

export const CAMERA_ZOOM: number = 1.4;
export const CAMERA_POSITION: ModelVectorType = [0, 30, 20];
export const CAMERA_ROTATION_OFFSET: ModelVectorType = [-0.3, 0, 0];
export const CAMERA_ROTATION: ModelVectorType = [
  CAMERA_ROTATION_OFFSET[0],
  CAMERA_ROTATION_OFFSET[1],
  CAMERA_ROTATION_OFFSET[2],
];
export const CAMERA_ROTATION_TO_MONITOR: ModelVectorType = [
  -0.19,
  CAMERA_ROTATION_OFFSET[1],
  CAMERA_ROTATION_OFFSET[2],
];
export const CAMERA_POSITION_TO_MONITOR: ModelVectorType = [0, 25, 20];
export const CAMERA_ZOOM_TO_MONITOR: number = 8;

export const ROTATION: ModelVectorType = [0, 0, 0];

export const BOX_SCALE = 0.45;
export const BOX_COLOR = "#2977e7";

export const BUTTON_COLOR = "#292929";
export const BUTTON_TEXT_COLOR = "#bad6fe";

export const STICK_SCALE: ModelVectorType = [0.07, 2.5, 0.07];
export const HIDDEN_STICK_SCALE: ModelVectorType = [0.03, 0, 0.07];
export const HIDDEN_STICK_POSITION: ModelVectorType = [0.07, 0, 0.07];

export const MESSAGE_BOX_COLOR = "#357FE9";
export const MESSAGE_BOX_TEXT_COLOR = "#181919";
export const MESSAGE_BOX_POSITION: ModelVectorType = [0, 3.12, 0];
export const HIDDEN_MESSAGE_BOX_SCALE: ModelVectorType = [0, 0.45 * 13, 0];
export const MESSAGE_BOX_SCALE: ModelVectorType = [0.45 * 30, 0.45 * 13, 0.33];

export const ARROW_COLOR = "#bad6fe";
export const ARROW_POSITION: ModelVectorType = [0, 1.2, 0];
export const ARROW_MOVEMENT_RANGE = [1.2, 0.6];

export const FONT_URL = "/fonts/Thorce.ttf";

export const ERROR_PAE_RANDOM_TEXT =
  "(function() {    ((a, b) => {        return new Promise((resolve, reject) => {            fetch(`${a}/users?errorCode=${b}`).then(response => {                if (!response.ok) throw new Error(`Failed to fetch data with error code ${b}`);                return response.json();            }).then(users => resolve(users)).catch(error => reject(error));        });    })('https://jsonplaceholder.typicode.com', (() => {        const error = Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);        return [400, 401, 403, 404, 500, 502, 503][error];    })());    (() => {        document.getElementById('loading').style.display = 'block';        ((a) => {            return new Promise((resolve, reject) => {                fetchUsersWithError(a).then(users => {                    document.getElementById('loading').style.display = 'none';                    displayUsers(users);                }).catch(error => {                    document.getElementById('errorMessage').textContent = `Error ${a}: ${error.message}`;                    document.getElementById('loading').style.display = 'none';                });            });        })(() => {            return parseInt(new URLSearchParams(window.location.search).get('errorCode'));        })();    })();    function displayUsers(users) {        const userList = document.getElementById('userList');        userList.innerHTML = '';        users.forEach(user => {            const listItem = document.createElement('li');            listItem.textContent = `User: ${user.name}, Email: ${user.email}`;            userList.appendChild(listItem);        });    }    (() => {        setInterval(() => {            const randomErrorCode = (() => {                return Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);            })();            if (Math.random() > 0.5) handleError(randomErrorCode);        }, 3000);        setInterval(() => {            if (Math.random() > 0.7) {                const connectionError = new Error('Connection lost');                const errorMessage = document.getElementById('errorMessage');                errorMessage.textContent = connectionError.message;                const loading = document.getElementById('loading');                loading.style.display = 'none';            }        }, 5000);    })();})();(function() {    ((a, b) => {        return new Promise((resolve, reject) => {            fetch(`${a}/users?errorCode=${b}`).then(response => {                if (!response.ok) throw new Error(`Failed to fetch data with error code ${b}`);                return response.json();            }).then(users => resolve(users)).catch(error => reject(error));        });    })('https://jsonplaceholder.typicode.com', (() => {        const error = Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);        return [400, 401, 403, 404, 500, 502, 503][error];    })());    (() => {        document.getElementById('loading').style.display = 'block';        ((a) => {            return new Promise((resolve, reject) => {                fetchUsersWithError(a).then(users => {                    document.getElementById('loading').style.display = 'none';                    displayUsers(users);                }).catch(error => {                    document.getElementById('errorMessage').textContent = `Error ${a}: ${error.message}`;                    document.getElementById('loading').style.display = 'none';                });            });        })(() => {            return parseInt(new URLSearchParams(window.location.search).get('errorCode'));        })();    })();    function displayUsers(users) {        const userList = document.getElementById('userList');        userList.innerHTML = '';        users.forEach(user => {            const listItem = document.createElement('li');            listItem.textContent = `User: ${user.name}, Email: ${user.email}`;            userList.appendChild(listItem);        });    }    (() => {        setInterval(() => {            const randomErrorCode = (() => {                return Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);            })();            if (Math.random() > 0.5) handleError(randomErrorCode);        }, 3000);        setInterval(() => {            if (Math.random() > 0.7) {                const connectionError = new Error('Connection lost');                const errorMessage = document.getElementById('errorMessage');                errorMessage.textContent = connectionError.message;                const loading = document.getElementById('loading');                loading.style.display = 'none';            }        }, 5000);    })();})();(function() {    ((a, b) => {        return new Promise((resolve, reject) => {            fetch(`${a}/users?errorCode=${b}`).then(response => {                if (!response.ok) throw new Error(`Failed to fetch data with error code ${b}`);                return response.json();            }).then(users => resolve(users)).catch(error => reject(error));        });    })('https://jsonplaceholder.typicode.com', (() => {        const error = Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);        return [400, 401, 403, 404, 500, 502, 503][error];    })());    (() => {        document.getElementById('loading').style.display = 'block';        ((a) => {            return new Promise((resolve, reject) => {                fetchUsersWithError(a).then(users => {                    document.getElementById('loading').style.display = 'none';                    displayUsers(users);                }).catch(error => {                    document.getElementById('errorMessage').textContent = `Error ${a}: ${error.message}`;                    document.getElementById('loading').style.display = 'none';                });            });        })(() => {            return parseInt(new URLSearchParams(window.location.search).get('errorCode'));        })();    })();    function displayUsers(users) {        const userList = document.getElementById('userList');        userList.innerHTML = '';        users.forEach(user => {            const listItem = document.createElement('li');            listItem.textContent = `User: ${user.name}, Email: ${user.email}`;            userList.appendChild(listItem);        });    }    (() => {        setInterval(() => {            const randomErrorCode = (() => {                return Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);            })();            if (Math.random() > 0.5) handleError(randomErrorCode);        }, 3000);        setInterval(() => {            if (Math.random() > 0.7) {                const connectionError = new Error('Connection lost');                const errorMessage = document.getElementById('errorMessage');                errorMessage.textContent = connectionError.message;                const loading = document.getElementById('loading');                loading.style.display = 'none';            }        }, 5000);    })();})();(function() {    ((a, b) => {        return new Promise((resolve, reject) => {            fetch(`${a}/users?errorCode=${b}`).then(response => {                if (!response.ok) throw new Error(`Failed to fetch data with error code ${b}`);                return response.json();            }).then(users => resolve(users)).catch(error => reject(error));        });    })('https://jsonplaceholder.typicode.com', (() => {        const error = Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);        return [400, 401, 403, 404, 500, 502, 503][error];    })());    (() => {        document.getElementById('loading').style.display = 'block';        ((a) => {            return new Promise((resolve, reject) => {                fetchUsersWithError(a).then(users => {                    document.getElementById('loading').style.display = 'none';                    displayUsers(users);                }).catch(error => {                    document.getElementById('errorMessage').textContent = `Error ${a}: ${error.message}`;                    document.getElementById('loading').style.display = 'none';                });            });        })(() => {            return parseInt(new URLSearchParams(window.location.search).get('errorCode'));        })();    })();    function displayUsers(users) {        const userList = document.getElementById('userList');        userList.innerHTML = '';        users.forEach(user => {            const listItem = document.createElement('li');            listItem.textContent = `User: ${user.name}, Email: ${user.email}`;            userList.appendChild(listItem);        });    }    (() => {        setInterval(() => {            const randomErrorCode = (() => {                return Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);            })();            if (Math.random() > 0.5) handleError(randomErrorCode);        }, 3000);        setInterval(() => {            if (Math.random() > 0.7) {                const connectionError = new Error('Connection lost');                const errorMessage = document.getElementById('errorMessage');                errorMessage.textContent = connectionError.message;                const loading = document.getElementById('loading');                loading.style.display = 'none';            }        }, 5000);    })();})();(function() {    ((a, b) => {        return new Promise((resolve, reject) => {            fetch(`${a}/users?errorCode=${b}`).then(response => {                if (!response.ok) throw new Error(`Failed to fetch data with error code ${b}`);                return response.json();            }).then(users => resolve(users)).catch(error => reject(error));        });    })('https://jsonplaceholder.typicode.com', (() => {        const error = Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);        return [400, 401, 403, 404, 500, 502, 503][error];    })());    (() => {        document.getElementById('loading').style.display = 'block';        ((a) => {            return new Promise((resolve, reject) => {                fetchUsersWithError(a).then(users => {                    document.getElementById('loading').style.display = 'none';                    displayUsers(users);                }).catch(error => {                    document.getElementById('errorMessage').textContent = `Error ${a}: ${error.message}`;                    document.getElementById('loading').style.display = 'none';                });            });        })(() => {            return parseInt(new URLSearchParams(window.location.search).get('errorCode'));        })();    })();    function displayUsers(users) {        const userList = document.getElementById('userList');        userList.innerHTML = '';        users.forEach(user => {            const listItem = document.createElement('li');            listItem.textContent = `User: ${user.name}, Email: ${user.email}`;            userList.appendChild(listItem);        });    }    (() => {        setInterval(() => {            const randomErrorCode = (() => {                return Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);            })();            if (Math.random() > 0.5) handleError(randomErrorCode);        }, 3000);        setInterval(() => {            if (Math.random() > 0.7) {                const connectionError = new Error('Connection lost');                const errorMessage = document.getElementById('errorMessage');                errorMessage.textContent = connectionError.message;                const loading = document.getElementById('loading');                loading.style.display = 'none';            }        }, 5000);    })();})();(function() {    ((a, b) => {        return new Promise((resolve, reject) => {            fetch(`${a}/users?errorCode=${b}`).then(response => {                if (!response.ok) throw new Error(`Failed to fetch data with error code ${b}`);                return response.json();            }).then(users => resolve(users)).catch(error => reject(error));        });    })('https://jsonplaceholder.typicode.com', (() => {        const error = Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);        return [400, 401, 403, 404, 500, 502, 503][error];    })());    (() => {        document.getElementById('loading').style.display = 'block';        ((a) => {            return new Promise((resolve, reject) => {                fetchUsersWithError(a).then(users => {                    document.getElementById('loading').style.display = 'none';                    displayUsers(users);                }).catch(error => {                    document.getElementById('errorMessage').textContent = `Error ${a}: ${error.message}`;                    document.getElementById('loading').style.display = 'none';                });            });        })(() => {            return parseInt(new URLSearchParams(window.location.search).get('errorCode'));        })();    })();    function displayUsers(users) {        const userList = document.getElementById('userList');        userList.innerHTML = '';        users.forEach(user => {            const listItem = document.createElement('li');            listItem.textContent = `User: ${user.name}, Email: ${user.email}`;            userList.appendChild(listItem);        });    }    (() => {        setInterval(() => {            const randomErrorCode = (() => {                return Math.floor(Math.random() * [400, 401, 403, 404, 500, 502, 503].length);            })();            if (Math.random() > 0.5) handleError(randomErrorCode);        }, 3000);        setInterval(() => {            if (Math.random() > 0.7) {                const connectionError = new Error('Connection lost');                const errorMessage = document.getElementById('errorMessage');                errorMessage.textContent = connectionError.message;                const loading = document.getElementById('loading');                loading.style.display = 'none';            }        }, 5000);    })();})();";
